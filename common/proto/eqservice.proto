syntax = "proto3";
package eqs;

service Inclusion {
    rpc GetZKStack(GetZKStackRequest) returns (GetZKStackResponse);
}

message GetZKStackRequest {
    uint64 height = 1;             // Data Availability (DA) block height
    bytes namespace = 2;           // 32 byte DA namespace
    bytes commitment = 3;          // 32 byte DA blob commitment
    uint32 batch_number = 4;       // ZKStack batch number
    uint64 chain_id = 5;           // ZKStack chain id
}

message ProofWithPublicValues {
    bytes proof_data = 1;          // The actual proof data
    bytes public_values = 2;       // The public values used to generate the proof
}

message GetZKStackResponse {
    enum Status {
        DA_PENDING = 0;            // Data Availability (DA) inclusion proof being collected
        DA_AVAILABLE = 1;          // DA inclusion proof collected
        ZKP_PENDING = 2;           // Zero Knowledge Proof (ZKP) of DA inclusion requested, generating
        ZKP_FINISHED = 3;          // ZKP of DA inclusion proof finished
        RETRYABLE_FAILURE = 4;     // If this is returned, the service then attempts to retry
        PERMANENT_FAILURE = 5;     // No way to complete request
    }
    Status status = 1;
    oneof response_value {
        bytes proof_id = 2;        // When ZKP_PENDING, this is the proof request/job id on the prover network
        ProofWithPublicValues proof = 3;  // When ZKP_FINISHED, this contains both proof data and public values
        string error_message = 4;  // Used when status is RETRYABLE_FAILURE or PERMANENT_FAILURE, this includes details why
        string status_message = 5; // Additional details on status of a request
    }
}
